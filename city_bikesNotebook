CityBikes
Send a request to CityBikes for the city of your choice.

# I had created a account and had generated an API Key + had created a (Client Id & Client Secret)
https://foursquare.com/developers/home
# I had created a Postman account and had entered a repo url and created a request
https://postman.com
    
    ## I had sent a request to CitiBikes using the codes below and I chose New York City
    ## On terminal creating env variable
export CITYBIKES_API_KEY='YOUR_API_KEY'
    
echo $CITYBIKES_API_KEY

## on terminal/jupyter only entering api to get info for networks
curl http://api.citybik.es/v2/networks
    
## Now on Jupyter Lab asking CityBikes for the city of my choice, I chose New York City. 
import requests

request_url = 'http://api.citybik.es/v2/networks/citi-bike-nyc'

response = requests.get(request_url)
response.text

## Results from request:

{"company":["NYC Bike Share, LLC","Motivate International, Inc.","PBSC Urban Solutions"],"ebikes":true,
 "gbfs_href":"https://gbfs.citibikenyc.com/gbfs/gbfs.json","href":"/v2/networks/citi-bike-nyc","id":
 "citi-bike-nyc","location":{"city":"New York, NY","country":"US","latitude":40.7143528,"longitude":
  -74.00597309999999},"name":"Citi Bike"}
Parse through the response to get the details you want for the bike stations in that city (latitude, longitude, number of bikes):

## Now on Jupyter Lab asking CityBikes for the number of of bikes in New York City. 
import requests                                                                                
                                                                                
request_url = 'http://api.citybik.es/v2/networks/coast-bike-share'

response = requests.get(request_url)
response.text

## Results from request:

"name":"Empire Blvd & New York Ave","timestamp":"2023-07-03T01:00:52.406000Z"},
{"empty_slots":14,"extra":{"ebikes":2,"has_ebikes":true,"last_updated":1688346021,
"payment":["key","creditcard"],"payment-terminal":true,"renting":1,"returning":1,
"slots":19,"uid":"d08be53f-9691-4d6f-81f3-7d052abb7dd6"},
                                                                                                                                            

## (latitude, longitude, radius)
## REQUEST for latitude using Yelp API
​
​
import requests
​
url = "https://api.yelp.com/v3/businesses/search?location=new%20york%20city&latitude=90&sort_by=best_match&limit=20"
headers = {
​
    "accept": "application/json",
    "Authorization": "Bearer YOUR_API_KEY"
}
​
response = requests.get(url, headers=headers)
​
print(response.text)
​
​
#### Response for latitude using YELP API
​
{
  "businesses": [
    {
      "id": "nRO136GRieGtxz18uD61DA",
      "alias": "eleven-madison-park-new-york",
      "name": "Eleven Madison Park",
      "image_url": "https://s3-media1.fl.yelpcdn.com/bphoto/s_H7gm_Hwmz--O6bo1iU-A/o.jpg",
      "is_closed": false,
      "url": "https://www.yelp.com/biz/eleven-madison-park-new-york?adjust_creative=CHX7gyrFyJTNf0pLIkkBWA&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=CHX7gyrFyJTNf0pLIkkBWA",
      "review_count": 2412,
      "categories": [
        {
          "alias": "newamerican",
          "title": "American (New)"
        },
          
          
## Request for longitude using YELP API
​
​
import requests
​
url = "https://api.yelp.com/v3/businesses/search?location=new%20york%20city&longitude=180&sort_by=best_match&limit=20"
​
headers = {
    "accept": "application/json",
    "Authorization": "Bearer 6sYnkRmhQwcWwnjP65O1cooTR7jDGlGkpodCYo3XlCA5qNCyh4-boa8AGkF42q_Jcoahmt_2zKz6sdimDUO7lBbINPl2OutHAv8EVRiBYFYROoB7CnZTqvKo9kueZHYx"
}
          
response = requests.get(url, headers=headers)
​
print(response.text)      
          
#### Response for longitude using YELP API 
          
{
  "businesses": [
    {
      "id": "nRO136GRieGtxz18uD61DA",
      "alias": "eleven-madison-park-new-york",
      "name": "Eleven Madison Park",
      "image_url": "https://s3-media1.fl.yelpcdn.com/bphoto/s_H7gm_Hwmz--O6bo1iU-A/o.jpg",
      "is_closed": false,
      "url": "https://www.yelp.com/biz/eleven-madison-park-new-york?adjust_creative=CHX7gyrFyJTNf0pLIkkBWA&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=CHX7gyrFyJTNf0pLIkkBWA",
      "review_count": 2412,
      "categories": [
        {
          "alias": "newamerican",
          "title": "American (New)"
        },
​
          
## Latitude and Longitude from citybikes:
for n in range(len(df2)):
    lat = df2.at[n, 'latitude']
    long = df2.at[n, 'longitude']
    print(lat)
    url = f"https://api.foursquare.com/v3/places/search?ll={lat}%2C{long}&radius=1000&categories=13003"
          
 ## Bike stations in NYC using CitiBikes API     
​
URL = 'https://api.foursquare.ca/rttiapi/v1/stops' 
params_dict = { 'lat' : '49.18', 
               'long' : '-122.85', 
               'radius' : '1000', 
               'apikey' : apikey 
              }
response = requests.get('https://api.foursquare.com/rttiapi/v1/stops', params=params_dict)
​
response = client.venues.search(params=params) 
response = requests.get('https://api.foursquare.com/rttiapi/v1/stops', params = params_dict) 
​
return requests.get('https://api.foursquare.com/rttiapi/v1/stops', params = params_dict)
​
## Places
curl request GET \ 
     url "https://api.foursquare.com/v3/places/search?ll=40.737604,-74.052478&radius=100" \ 
     header 'Accept: application/json' \ 
     header 'Authorization: '"$FOURSQUARE_API_KEY"''export FOURSQUARE_API_KEY=<your_api_key>
​
## This shows the full details on the NYC CSV + This also shows data in different neighborhoods
​
neighborhoods_subset = pd.read_csv("NYC-BikeShare-2015-2017-combined.csv")neighborhoods_subset.head()
​
## This displays the information
df.info()
​
## Bike stations in NYC (latitude, longitude, number of bikes).
​
cols = ['Start Station Latitude', 'Stop Station Longitude', 'Bike ID']
for col in cols: df[col] = df[col].astype('category') 
    
## (latitude, longitude, number of bikes).
import pandas as pd
import os 
​
data = pd.read_csv("NYC-BikeShare-2015-2017-combined.csv", encoding="unicode_escape")
​
## preparing data
data.dropna(subset=['Latitude', 'Longitude'], inplace=True)
# creation of variable with lon and lat together
data['ll'] = data['Latitude'].astype(str) + ',' + data['Longitude'].astype(str)data = 
data[data['ll'] != '0.0,0.0']
print(data.shape)
data.head()
​
 
Put your parsed results into a DataFrame:


 
