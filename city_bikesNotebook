CITYBIKES
SEND A REQUEST TO CITY BIKES FOR THE CITY OF YOUR CHOICE:


# I had viewed CityBikes website for API
https://citybikes.com/developers/home

    
## I had sent a request to CitiBikes using the codes below and I chose New York City

## On terminal/jupyter only entering API to get info for networks
import requests

request_url = 'http://api.citybik.es/v2/networks'

response = requests.get(request_url)
response.text
    
## Now on Jupyter Lab asking CityBikes for the city of my choice, I chose New York City. 

import requests

request_url = 'http://api.citybik.es/v2/networks/citi-bike-nyc'

response = requests.get(request_url)
response.text

## Results from response:

{"company":["NYC Bike Share, LLC","Motivate International, Inc.","PBSC Urban Solutions"],"ebikes":true,
 "gbfs_href":"https://gbfs.citibikenyc.com/gbfs/gbfs.json","href":"/v2/networks/citi-bike-nyc","id":
 "citi-bike-nyc","location":{"city":"New York, NY","country":"US","latitude":40.7143528,"longitude":
  -74.00597309999999},"name":"Citi Bike"}

PARSE THROUGH THE RESPONSE TO GET THE DETAILS YOU WANT FOR THE BIKE STATIONS IN THAT CITY (LONGITUDE, LATITUDE + NUMBER OF BIKES:)

    ## REQUEST for number of bikes using CityBikes API

## Now on Jupyter Lab asking Yelp/citybikes for the number of of bikes in New York City. 
## REQUEST for number of bikes using Yelp/citybikes API


## Finding lat/long on Yelp + bikestations
def yelp_request(lat,long):
    url= f"https://api.yelp.com/v3/businesses/search?latitude={lat}&longitude={long}&radius=1000&categories=restaurant&sort_by=best_match&limit=20"
    
    headers = {
    "accept": "application/json",
    "Authorization": "bearer your_api_key"
}

    response = requests.get(url, headers=headers)
    num_poi = len(response["businesses"])
    
    print(response.text)


#  calling the lat/long city bikes + bikestations
for row in range(len(df)):
    lat = df.iloc[row,0]
    long = df.iloc[row,1]
    
    yelp_request(lat,long)
    break

## Now on Jupyter Lab asking CityBikes for the number of of bikes in New York City. 
import requests                                                                                
                                                                                
request_url = 'http://api.citybik.es/v2/networks/coast-bike-share'

response = requests.get(request_url)
response.text

## Response from response:

"name":"Empire Blvd & New York Ave","timestamp":"2023-07-03T01:00:52.406000Z"},
{"empty_slots":14,"extra":{"ebikes":2,"has_ebikes":true,"last_updated":1688346021,
"payment":["key","creditcard"],"payment-terminal":true,"renting":1,"returning":1,
"slots":19,"uid":"d08be53f-9691-4d6f-81f3-7d052abb7dd6"},
                                                                    
-------

## Now on Jupyter Lab parsing through CityBikes response for the longitude & latitude:

import requests

request_url = 'http://api.citybik.es/v2/networks/citi-bike-nyc'

response = requests.get(request_url)
response.text

## Results from response:

{"latitude":40.7143528,
 "longitude":-74.00597309999999},
 "name":"Citi Bike"}
 
-------
 
## Longitude + Latitude using Yelp API:
 
 curl request GET \
      url 'https://api.yelp.com/v3/businesses/search?location=new%20york%20city&latitude=40.7143528&longitude=-74.00597309999999&categories=&attributes=&sort_by=best_match&limit=20' \
      header 'Authorization: bearer #Your API KEY# \
      header 'accept: application/json'
 
## Response for Longitude + Latitude using Yelp API:
 
 '{"network":{"company":["NYC Bike Share, LLC","Motivate International, 
 Inc.","PBSC Urban Solutions"],"ebikes":true,"gbfs_href":"https://gbfs.citibikenyc.com/gbfs/gbfs.json",
"href":"/v2/networks/citi-bike-nyc","id":"citi-bike-nyc","location":{"city":"New York, NY","country":"US",
"latitude":40.7143528,"longitude":-74.00597309999999},"name":"Citi Bike","stations":[{"empty_slots":26,"extra":
{"ebikes":1,"has_ebikes":true,"last_updated":1688077250,"payment":["key","creditcard"],"payment-terminal":true,
"renting":1,"returning":1,"slots":39,"uid":"66de099d-0aca-11e7-82f6-3863bb44ef7c"},"free_bikes":7,"id":
"46a983722ee1f51813a6a3eb6534a6e4","latitude":40.795,"longitude":-73.9645,"name":"W 100 St & Manhattan Ave",
"timestamp":"2023-06-29T22:21:40.437000Z"},{"empty_slots":63,"extra":{"ebikes":2,"has_ebikes":true,"last_updated":
  1688077235,"payment":["key","creditcard"],"payment-terminal":true,"renting":1,"returning":1,"slots":81,"uid":"
 

## Finding latitude & longitude using Foursquare
URL = 'https://api.foursquare.com/rttiapi/v1/stops'
    
params_dict = { 
             'lat' : '49.18',
             'long' : '-122.85',
             'radius' : '1000',
             'apikey' : apikey
              }
response = requests.get(URL, params=params_dict)


response = client.venues.search(params=params)
 
response = requests.get(URL, params = params_dict)

## This shows the full details on the NYC CSV
neighborhoods_subset = pd.read_csv("NYC-BikeShare-2015-2017-combined.csv")
neighborhoods_subset.head()

## This displays the information
df.info()

## This shows data in different neighborhoods
neighborhoods_subset = pd.read_csv("NYC-BikeShare-2015-2017-combined.csv")
neighborhoods_subset.head()                                                     
​
 
Put your parsed results into a DataFrame:

## Dataframe
​
dataFrame1 = pd.DataFrame({'Latitude': ['40.734786', '40.737604', '40.724605', '40.728745'],  
                    'Longitude': ['-74.050444', '-74.052478', '-74.078406', '-74.032108'],  
                    'Number of Bikes':[12,19,0,13]})  
  
  
frames = [dataFrame1]  
  
result = pd.concat(frames)  
display(result) 


 
